// Mocks generated by Mockito 5.2.0 from annotations
// in shortly/test/feature/shorten/presentation/bloc/shorten_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shortly/data/model/short_url.dart' as _i6;
import 'package:shortly/data/result.dart' as _i3;
import 'package:shortly/feature/shorten/data/repository/shorten_repository.dart'
    as _i2;
import 'package:shortly/feature/shorten/domain/usecase/shorten_url_use_case.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeShortenRepository_0 extends _i1.Fake
    implements _i2.ShortenRepository {}

class _FakeResult_1<T> extends _i1.Fake implements _i3.Result<T> {}

/// A class which mocks [ShortenUrlUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortenUrlUseCase extends _i1.Mock implements _i4.ShortenUrlUseCase {
  MockShortenUrlUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ShortenRepository get shortenRepository =>
      (super.noSuchMethod(Invocation.getter(#shortenRepository),
          returnValue: _FakeShortenRepository_0()) as _i2.ShortenRepository);
  @override
  _i5.Future<_i3.Result<_i6.ShortUrl>> call(String? url) =>
      (super.noSuchMethod(Invocation.method(#call, [url]),
              returnValue: Future<_i3.Result<_i6.ShortUrl>>.value(
                  _FakeResult_1<_i6.ShortUrl>()))
          as _i5.Future<_i3.Result<_i6.ShortUrl>>);
}
