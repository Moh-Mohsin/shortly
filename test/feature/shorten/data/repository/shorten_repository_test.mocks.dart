// Mocks generated by Mockito 5.2.0 from annotations
// in shortly/test/feature/shorten/data/repository/shorten_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shortly/data/db/dao/short_url_dao.dart' as _i2;
import 'package:shortly/data/db/database.dart' as _i7;
import 'package:shortly/data/model/short_url.dart' as _i6;
import 'package:shortly/data/network/response/shorten_response.dart' as _i5;
import 'package:shortly/feature/shorten/data/source/shorten_remote_data_source.dart'
    as _i8;
import 'package:sqflite/sqflite.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeShortUrlDao_0 extends _i1.Fake implements _i2.ShortUrlDao {}

class _FakeStreamController_1<T> extends _i1.Fake
    implements _i3.StreamController<T> {}

class _FakeDatabaseExecutor_2 extends _i1.Fake implements _i4.DatabaseExecutor {
}

class _FakeShortenResponse_3 extends _i1.Fake implements _i5.ShortenResponse {}

/// A class which mocks [ShortUrlDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortUrlDao extends _i1.Mock implements _i2.ShortUrlDao {
  MockShortUrlDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i6.ShortUrl>> findAllShortUrls() =>
      (super.noSuchMethod(Invocation.method(#findAllShortUrls, []),
              returnValue: Stream<List<_i6.ShortUrl>>.empty())
          as _i3.Stream<List<_i6.ShortUrl>>);
  @override
  _i3.Future<void> insertShortUrl(_i6.ShortUrl? shortUrl) =>
      (super.noSuchMethod(Invocation.method(#insertShortUrl, [shortUrl]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteShortUrl(_i6.ShortUrl? shortUrl) =>
      (super.noSuchMethod(Invocation.method(#deleteShortUrl, [shortUrl]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i7.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ShortUrlDao get shortUrlDao =>
      (super.noSuchMethod(Invocation.getter(#shortUrlDao),
          returnValue: _FakeShortUrlDao_0()) as _i2.ShortUrlDao);
  @override
  _i3.StreamController<String> get changeListener =>
      (super.noSuchMethod(Invocation.getter(#changeListener),
              returnValue: _FakeStreamController_1<String>())
          as _i3.StreamController<String>);
  @override
  set changeListener(_i3.StreamController<String>? _changeListener) =>
      super.noSuchMethod(Invocation.setter(#changeListener, _changeListener),
          returnValueForMissingStub: null);
  @override
  _i4.DatabaseExecutor get database =>
      (super.noSuchMethod(Invocation.getter(#database),
          returnValue: _FakeDatabaseExecutor_2()) as _i4.DatabaseExecutor);
  @override
  set database(_i4.DatabaseExecutor? _database) =>
      super.noSuchMethod(Invocation.setter(#database, _database),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [ShortenRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortenRemoteDataSource extends _i1.Mock
    implements _i8.ShortenRemoteDataSource {
  MockShortenRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.ShortenResponse> shortenUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#shortenUrl, [url]),
              returnValue:
                  Future<_i5.ShortenResponse>.value(_FakeShortenResponse_3()))
          as _i3.Future<_i5.ShortenResponse>);
}
